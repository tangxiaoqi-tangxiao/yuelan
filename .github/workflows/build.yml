name: Mac和Windows打包

on:
    push:
      branches:
        - main  # 根据需要更改分支

jobs:
    build: # 作业名称

        runs-on: ${{ matrix.os }} # 运行环境

        strategy:
            matrix:
                os: [macos-latest, windows-latest] # 运行环境

        steps:
            - name: 检出代码
              uses: actions/checkout@v4 # 检出代码

            - name: 安装Node.js
              uses: actions/setup-node@v4 # 设置Python环境
              with:
                node-version: "v20.16.0" # 设置Node.js版本

            - name: 安装依赖
              run: npm install
              
            - name: Win查看打包后的文件结构
              if: matrix.os == 'windows-latest'
              run: |
                    echo "打包后的文件结构如下:"
                    ls -R ./dist

            - name: Mac查看打包后的文件结构
              if: matrix.os == 'macos-latest'
              run: |
                    echo "打包后的文件结构如下:"
                    dir dist
              
            - name: 压缩 dist 目录
              if: matrix.os == 'windows-latest'
              run: |
                Compress-Archive -Path ./dist/* -DestinationPath Win_Release.zip

            - name: 压缩 dist 目录
              if: matrix.os == 'macos-latest'
              run: |
                zip -r Mac_Release.zip ./dist
              shell: bash

            - name: 创建 GitHub Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: v1.0.${{ github.run_number }}
                release_name: 'Release v1.0.${{ github.run_number }}'
                draft: false
                prerelease: false

            - name: 上传 Win 版本到 GitHub Release
              if: matrix.os == 'windows-latest'
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ./Win_Release.zip
                asset_name: yuelan_Win
                asset_content_type: application/zip

            - name: 上传 Mac 版本到 GitHub Release
              if: matrix.os == 'macos-latest'
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ./Mac_Release.zip
                asset_name: yuelan_Mac
                asset_content_type: application/zip