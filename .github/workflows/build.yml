name: Mac和Windows打包

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}  # 将 release 的 upload_url 作为输出传递给下一个 job

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "v20.16.0"

      - name: 安装依赖
        run: npm install

      - name: Win打包
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: Mac打包
        if: matrix.os == 'macos-latest'
        run: npm run build:mac

      - name: Win查看打包后的文件结构
        if: matrix.os == 'windows-latest'
        run: |
              echo "打包后的文件结构如下:"
              dir dist

      - name: Mac查看打包后的文件结构
        if: matrix.os == 'macos-latest'
        run: |
              echo "打包后的文件结构如下:"
              ls -R ./dist

      - name: Win压缩 dist 目录
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path ./dist/* -DestinationPath Win_Release.zip

      - name: Mac压缩 dist 目录
        if: matrix.os == 'macos-latest'
        run: |
          zip -r Mac_Release.zip ./dist
        shell: bash

      - name: 创建 GitHub Release
        if: matrix.os == 'macos-latest'  # 只在 macOS 上创建 Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: 'Release v1.0.${{ github.run_number }}'
          draft: false
          prerelease: false

      - name: 上传 Windows 版本到 GitHub Release
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Win_Release.zip
          asset_name: yuelan_Win.zip
          asset_content_type: application/zip

      - name: 上传 Mac 版本到 GitHub Release
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Mac_Release.zip
          asset_name: yuelan_Mac.zip
          asset_content_type: application/zip