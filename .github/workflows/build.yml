name: 阅览

on:
  push:
    branches:
      - main

jobs:
  Win:
    name: Win打包
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "v20.16.0"

      - name: 安装依赖
        run: npm install

      - name: 打包阅览
        run: npm run build:win

      - name: 查看打包后的文件结构
        run: |
          echo "打包后的文件结构如下:"
          Get-ChildItem

      - name: 获取最近的 Git 标签
        id: get_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: 'Release ${{ steps.get_tag.outputs.tag }}'
          draft: false
          prerelease: false

      - name: 上传 Win 打包产物到 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: Win_Release.zip
          asset_content_type: application/zip

  Mac:
    name: Mac打包
    runs-on: macos-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "v20.16.0"

      - name: 安装依赖
        run: npm install

      - name: 打包阅览
        run: npm run build:mac

      - name: 查看打包后的文件结构
        run: |
          echo "打包后的文件结构如下:"
          ls -R ./dist

      - name: 获取最近的 Git 标签
        id: get_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: 'Release ${{ steps.get_tag.outputs.tag }}'
          draft: false
          prerelease: false

      - name: 上传 Mac 打包产物到 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: Mac_Release.zip
          asset_content_type: application/zip
